newstack 21 10.50.43.127
https://os.cybbh.io/public/os/latest/index.html
https://vta.cybbh.space/horizon/project/instances/
https://os.cybbh.io/public/os/latest/index.html
CTFD server http://10.50.24.129:8000/
ELWI-M-007
m23007
#get Powershell version
get-host | select version

#read a file 
Get-Content -path "c:\file path"
cat 
#get help 
get-help
get-help Get-Process
get-help get -process -Online
program location
#et-Location
pwd 
#get alias 
get alias pwd 
#get member 
get-process |  get-member
get-process
get-process | select-object processname, id
#dot notatiom
(get-proess).name
#rocess control
start-process notepad.exe
stop-process notpad.exe
stop-process.note
#pipline
Get-process | selet-object name,id, path | where-object {$_.id -lt '1000')
#CIM
get-CimClass
Get-wmiobject -class Win32_logicaldisk -filter "drivdetyp=3"

#foreeach
$letterarray = "a", "b", "C"
foreach ($x in $letterarray)
{
Write-Host $x 
}
#if...if condition is met it will execute the scriptbook
$a =3
if ($a -gt 2){
    write-host "the value $a is than 2"
    }


    if ($a -gt 2) {
    write-host "the valuse is greater then 2"
    }
    elseif ($a -eq 2){
    write-host "the value $a is equal than 2"
    }
    else { 
    write-host "the value is less then 2"
    }

    #variables 
    #create a varible
    $myvarible = get=process 
    $myvariable
    clear-variable -name -$myvariable
    #get rid of variable 
    remove-variable -name  myvarible 
    #variable/command substitution and dot property

    $today = (get-date).DateTime
    $today
    #automatic variables 
    get-help about_automatic_ variables
   
    *$profile 

new-item -itemtype file -path $profile.currentusercurrenthost -force

new-alias -name ip -value get-nettcpconnection

#execution polict, can i run .ps1 powershell scriptd
Get-ExecutionPolicy
#comparison opperator
Get-Service | where-object {$_.status -eq "stopped"}
get-service | where {$_.Name -like "*xbox*" }
#powershell profiles is a form of persistance it withstands reboots
$profile #$profile is an automatic varible 
test-path -path $profile.AllUsersAllHosts
test-path -path $profile.AllUserscurrenthost 
test-path -path $profile.CurrentUserAllHosts
test-path -path $profile.CurrentUserCurrentHost
get-content -path $profile.CurrentUserCurrentHost
cat -path $profile.CurrentUserCurrentHost

#create profile 
new-item -itemtype file -path $profile.CurrentUserCurrentHost -force 

registry 
Different tools to view/manipulate the registry

    regedit.exe

        GUI

        Located at "C:\Windows\regedit.exe"

    reg.exe

        CLI

        Located at "C:\Windows\System32\reg.exe"

        Minimum commands to know

            Reg add, reg query, reg delete

Different tools to view/manipulate the registry

    Powershell

        Root Hive Keys loaded as powershell drives

        Commands used

            get-item, get-itemproperty, get-childitem

            set-itemproperty, new-item, new-itemproperty

Mount a Remote Registry via Regedit GUI

Open the Regedit GUI
Click on *File* => *Connect Network Registry*
Type *File-Server*
Click on *Check Names* Button (File-Server will become underlined)
Click *OK*

Powershell & CMD Line Commands for sethc.exe Demo

    CLI:

        reg add "hklm\software\microsoft\windows nt\currentversion\image File Execution Options\sethc.exe" /v "Debugger" /t reg_sz /d "c:\Windows\System32\cmd.exe"

    Powershell:

        new-item "hklm:\software\microsoft\windows nt\currentversion\image File Execution Options\sethc.exe"

        New-ItemProperty -path "hklm:\software\microsoft\windows nt\currentversion\image File Execution Options\sethc.exe" -Name Debugger -Type String -Value C:\Windows\System32\cmd.exe
Mount a Registry Hive With PSDrive

    Create Temporary or Permanent connections to navigate the registry

        New-PSDrive -Name HKU -PSProvider Registry -Root HKEY_USERS
PSdrives need a name, provider, and root 

Using the Registry

    Outcome: The "Using the Registry" section covers the practical uses of the Windows Registry for both offensive and defensive purposes. Cover that any changes are only used if the process reads the new value from the registry. Cover the registries most commonly used for persistence. Cover the registries most commonly used for forensics.

Registry Changes

    Often require restart

        Either entire system or just a program

    Some changes take effect immediately

    Some parts of registry are always in memory

Registry locations that can be utilized for persistence

    HKLM\Software\Microsoft\Windows\CurrentVersion\Run

    HKU\<SID>\Software\Microsoft\Windows\CurrentVersion\Run

    HKLM\SYSTEM\CurrentControlSet\services

    HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders

    HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders

    HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
Interesting Registry Locations

    HKLM\BCD00000000

        Replacement of old boot.ini file

    HKLM\SAM\SAM

        Use "psexec -s -i regedit" from administrator cmd.exe to view the SAM

    HKU\<SID>\Software\Policies\Microsoft\Windows\System\Scripts

        Group policy Logon/Logoff Scripts defined here

Baselining the Registry

    Determining if the registry has been compromised

        Suspicious behavior

        Potenially malicious application removed from file system, but traces of application keep appearing

    Importance of baselining

Value 	Universal well-known SID 	Identifies
S-1-0-0 	Null SID 	A group with no members. This is often used when a SID value isn't known.
S-1-1-0 	World 	A group that includes all users.
S-1-2-0 	Local 	Users who sign in to terminals that are locally (physically) connected to the system.
S-1-2-1 	Console Logon 	A group that includes users who are signed in to the physical console.
S-1-3-0 	Creator Owner ID 	A security identifier to be replaced by the security identifier of the user who created a new object. This SID is used in inheritable access control entries (ACEs).
S-1-3-1 	Creator Group ID 	A security identifier to be replaced by the primary-group SID of the user who created a new object. Use this SID in inheritable ACEs.
S-1-3-2 	Owner Server 	A placeholder in an inheritable ACE. When the ACE is inherited, the system replaces this SID with the SID for the object's owner server and stores information about who created a given object or file.
S-1-3-3 	Group Server 	A placeholder in an inheritable ACE. When the ACE is inherited, the system replaces this SID with the SID for the object's group server and stores information about the groups that are allowed to work with the object.
S-1-3-4 	Owner Rights 	A group that represents the current owner of the object. When an ACE that carries this SID is applied to an object, the system ignores the implicit READ_CONTROL and WRITE_DAC permissions for the object owner.
S-1-4 	Non-unique Authority 	A SID that represents an identifier authority.
S-1-5 	NT Authority 	A SID that represents an identifier authority.
S-1-5-80-0 	All Services 	A group that includes all service processes configured on the system. Membership is controlled by the operating system.
Identifier authority 	Value 	SID string prefix
SECURITY_NULL_SID_AUTHORITY 	0 	S-1-0
SECURITY_WORLD_SID_AUTHORITY 	1 	S-1-1
SECURITY_LOCAL_SID_AUTHORITY 	2 	S-1-2
SECURITY_CREATOR_SID_AUTHORITY 	3 	S-1-3
SECURITY_NT_AUTHORITY 	5 	S-1-5
SECURITY_AUTHENTICATION_AUTHORITY 	18 	S-1-18
Relative identifier authority 	Value 	Identifier authority
SECURITY_NULL_RID 	0 	S-1-0
SECURITY_WORLD_RID 	0 	S-1-1
SECURITY_LOCAL_RID 	0 	S-1-2
SECURITY_CREATOR_OWNER_RID 	0 	S-1-3
SECURITY_CREATOR_GROUP_RID 	1 	S-1-3
SID 	Display name 	Description
S-1-5-1 	Dialup 	A group that includes all users who are signed in to the system via dial-up connection.
S-1-5-113 	Local account 	You can use this SID when you're restricting network sign-in to local accounts instead of "administrator" or equivalent. This SID can be effective in blocking network sign-in for local users and groups by account type regardless of what they're named.
S-1-5-114 	Local account and member of Administrators group 	You can use this SID when you're restricting network sign-in to local accounts instead of "administrator" or equivalent. This SID can be effective in blocking network sign-in for local users and groups by account type regardless of what they're named.
S-1-5-2 	Network 	A group that includes all users who are signed in via a network connection. Access tokens for interactive users don't contain the Network SID.
S-1-5-3 	Batch 	A group that includes all users who have signed in via batch queue facility, such as task scheduler jobs.
S-1-5-4 	Interactive 	A group that includes all users who sign in interactively. A user can start an interactive sign-in session by opening a Remote Desktop Services connection from a remote computer, or by using a remote shell such as Telnet. In each case, the user's access token contains the Interactive SID. If the user signs in by using a Remote Desktop Services connection, the user's access token also contains the Remote Interactive Logon SID.
S-1-5-5- X-Y 	Logon Session 	The X and Y values for these SIDs uniquely identify a particular sign-in session.
S-1-5-6 	Service 	A group that includes all security principals that have signed in as a service.
S-1-5-7 	Anonymous Logon 	A user who has connected to the computer without supplying a user name and password.
The Anonymous Logon identity is different from the identity that's used by Internet Information Services (IIS) for anonymous web access. IIS uses an actual account—by default, IUSR_ComputerName, for anonymous access to resources on a website. Strictly speaking, such access isn't anonymous, because the security principal is known even though unidentified people are using the account. IUSR_ComputerName (or whatever you name the account) has a password, and IIS signs in to the account when the service starts. As a result, the IIS "anonymous" user is a member of Authenticated Users but Anonymous Logon isn't.
S-1-5-8 	Proxy 	Doesn't currently apply: this SID isn't used.
S-1-5-9 	Enterprise Domain Controllers 	A group that includes all domain controllers in a forest of domains.
S-1-5-10 	Self 	A placeholder in an ACE for a user, group, or computer object in Active Directory. When you grant permissions to Self, you grant them to the security principal that's represented by the object. During an access check, the operating system replaces the SID for Self with the SID for the security principal that's represented by the object.
S-1-5-11 	Authenticated Users 	A group that includes all users and computers with identities that have been authenticated. Authenticated Users doesn't include Guest even if the Guest account has a password.
This group includes authenticated security principals from any trusted domain, not only the current domain.
S-1-5-12 	Restricted Code 	An identity that's used by a process that's running in a restricted security context. In Windows and Windows Server operating systems, a software restriction policy can assign one of three security levels to code:
Unrestricted
Restricted
Disallowed
When code runs at the restricted security level, the Restricted SID is added to the user's access token.
S-1-5-13 	Terminal Server User 	A group that includes all users who sign in to a server with Remote Desktop Services enabled.
S-1-5-14 	Remote Interactive Logon 	A group that includes all users who sign in to the computer by using a remote desktop connection. This group is a subset of the Interactive group. Access tokens that contain the Remote Interactive Logon SID also contain the Interactive SID.
S-1-5-15 	This Organization 	A group that includes all users from the same organization. Included only with Active Directory accounts and added only by a domain controller.
S-1-5-17 	IUSR 	An account that's used by the default Internet Information Services (IIS) user.
S-1-5-18 	System (or LocalSystem) 	An identity that's used locally by the operating system and by services that are configured to sign in as LocalSystem.
System is a hidden member of Administrators. That is, any process running as System has the SID for the built-in Administrators group in its access token.
When a process that's running locally as System accesses network resources, it does so by using the computer's domain identity. Its access token on the remote computer includes the SID for the local computer's domain account plus SIDs for security groups that the computer is a member of, such as Domain Computers and Authenticated Users.
S-1-5-19 	NT Authority (LocalService) 	An identity that's used by services that are local to the computer, have no need for extensive local access, and don't need authenticated network access. Services that run as LocalService access local resources as ordinary users, and they access network resources as anonymous users. As a result, a service that runs as LocalService has significantly less authority than a service that runs as LocalSystem locally and on the network.
S-1-5-20 	Network Service 	An identity that's used by services that have no need for extensive local access but do need authenticated network access. Services running as NetworkService access local resources as ordinary users and access network resources by using the computer's identity. As a result, a service that runs as NetworkService has the same network access as a service that runs as LocalSystem, but it has significantly reduced local access.
S-1-5-domain-500 	Administrator 	A user account for the system administrator. Every computer has a local Administrator account and every domain has a domain Administrator account.
The Administrator account is the first account created during operating system installation. The account can't be deleted, disabled, or locked out, but it can be renamed.
By default, the Administrator account is a member of the Administrators group, and it can't be removed from that group.
S-1-5-domain-501 	Guest 	A user account for people who don't have individual accounts. Every computer has a local Guest account, and every domain has a domain Guest account.
By default, Guest is a member of the Everyone and the Guests groups. The domain Guest account is also a member of the Domain Guests and Domain Users groups.
Unlike Anonymous Logon, Guest is a real account, and it can be used to sign in interactively. The Guest account doesn't require a password, but it can have one.
S-1-5-domain-502 	KRBTGT 	A user account that's used by the Key Distribution Center (KDC) service. The account exists only on domain controllers.
S-1-5-domain-512 	Domain Admins 	A global group with members that are authorized to administer the domain. By default, the Domain Admins group is a member of the Administrators group on all computers that have joined the domain, including domain controllers.
Domain Admins is the default owner of any object that's created in the domain's Active Directory by any member of the group. If members of the group create other objects, such as files, the default owner is the Administrators group.
S-1-5-domain-513 	Domain Users 	A global group that includes all users in a domain. When you create a new User object in Active Directory, the user is automatically added to this group.
S-1-5-domain-514 	Domain Guests 	A global group that, by default, has only one member: the domain's built-in Guest account.
S-1-5-domain-515 	Domain Computers 	A global group that includes all computers that have joined the domain, excluding domain controllers.
S-1-5-domain-516 	Domain Controllers 	A global group that includes all domain controllers in the domain. New domain controllers are added to this group automatically.
S-1-5-domain-517 	Cert Publishers 	A global group that includes all computers that host an enterprise certification authority.
Cert Publishers are authorized to publish certificates for User objects in Active Directory.
S-1-5-root domain-518 	Schema Admins 	A group that exists only in the forest root domain. It's a universal group if the domain is in native mode, and it's a global group if the domain is in mixed mode. The Schema Admins group is authorized to make schema changes in Active Directory. By default, the only member of the group is the Administrator account for the forest root domain.
S-1-5-root domain-519 	Enterprise Admins 	A group that exists only in the forest root domain. It's a universal group if the domain is in native mode, and it's a global group if the domain is in mixed mode.
The Enterprise Admins group is authorized to make changes to the forest infrastructure, such as adding child domains, configuring sites, authorizing DHCP servers, and installing enterprise certification authorities.
By default, the only member of Enterprise Admins is the Administrator account for the forest root domain. The group is a default member of every Domain Admins group in the forest.
S-1-5-domain-520 	Group Policy Creator Owners 	A global group that's authorized to create new Group Policy Objects in Active Directory. By default, the only member of the group is Administrator.
Objects that are created by members of Group Policy Creator Owners are owned by the individual user who creates them. In this way, the Group Policy Creator Owners group is unlike other administrative groups (such as Administrators and Domain Admins). Objects that are created by members of these groups are owned by the group rather than by the individual.
S-1-5-domain-521 	Read-only Domain Controllers 	A global group that includes all read-only domain controllers.
S-1-5-domain-522 	Clonable Controllers 	A global group that includes all domain controllers in the domain that can be cloned.
S-1-5-domain-525 	Protected Users 	A global group that is afforded additional protections against authentication security threats.
S-1-5-root domain-526 	Key Admins 	This group is intended for use in scenarios where trusted external authorities are responsible for modifying this attribute. Only trusted administrators should be made a member of this group.
S-1-5-domain-527 	Enterprise Key Admins 	This group is intended for use in scenarios where trusted external authorities are responsible for modifying this attribute. Only trusted enterprise administrators should be made a member of this group.
S-1-5-32-544 	Administrators 	A built-in group. After the initial installation of the operating system, the only member of the group is the Administrator account. When a computer joins a domain, the Domain Admins group is added to the Administrators group. When a server becomes a domain controller, the Enterprise Admins group also is added to the Administrators group.
S-1-5-32-545 	Users 	A built-in group. After the initial installation of the operating system, the only member is the Authenticated Users group.
S-1-5-32-546 	Guests 	A built-in group. By default, the only member is the Guest account. The Guests group allows occasional or one-time users to sign in with limited privileges to a computer's built-in Guest account.
S-1-5-32-547 	Power Users 	A built-in group. By default, the group has no members. Power users can create local users and groups; modify and delete accounts that they have created; and remove users from the Power Users, Users, and Guests groups. Power users also can install programs; create, manage, and delete local printers; and create and delete file shares.
S-1-5-32-548 	Account Operators 	A built-in group that exists only on domain controllers. By default, the group has no members. By default, Account Operators have permission to create, modify, and delete accounts for users, groups, and computers in all containers and organizational units of Active Directory except the Builtin container and the Domain Controllers OU. Account Operators don't have permission to modify the Administrators and Domain Admins groups, nor do they have permission to modify the accounts for members of those groups.
S-1-5-32-549 	Server Operators 	Description: A built-in group that exists only on domain controllers. By default, the group has no members. Server Operators can sign in to a server interactively; create and delete network shares; start and stop services; back up and restore files; format the hard disk of the computer; and shut down the computer.
S-1-5-32-550 	Print Operators 	A built-in group that exists only on domain controllers. By default, the only member is the Domain Users group. Print Operators can manage printers and document queues.
S-1-5-32-551 	Backup Operators 	A built-in group. By default, the group has no members. Backup Operators can back up and restore all files on a computer, regardless of the permissions that protect those files. Backup Operators also can sign in to the computer and shut it down.
S-1-5-32-552 	Replicators 	A built-in group that's used by the File Replication service on domain controllers. By default, the group has no members. Don't add users to this group.
S-1-5-domain-553 	RAS and IAS Servers 	A local domain group. By default, this group has no members. Computers that are running the Routing and Remote Access service are added to the group automatically.
Members of this group have access to certain properties of User objects, such as Read Account Restrictions, Read Logon Information, and Read Remote Access Information.
S-1-5-32-554 	Builtin\Pre-Windows 2000 Compatible Access 	An alias added by Windows 2000. A backward compatibility group that allows read access on all users and groups in the domain.
S-1-5-32-555 	Builtin\Remote Desktop Users 	An alias. Members of this group are granted the right to sign in remotely.
S-1-5-32-556 	Builtin\Network Configuration Operators 	An alias. Members of this group can have some administrative privileges to manage configuration of networking features.
S-1-5-32-557 	Builtin\Incoming Forest Trust Builders 	An alias. Members of this group can create incoming, one-way trusts to this forest.
S-1-5-32-558 	Builtin\Performance Monitor Users 	An alias. Members of this group have remote access to monitor this computer.
S-1-5-32-559 	Builtin\Performance Log Users 	An alias. Members of this group have remote access to schedule logging of performance counters on this computer.
S-1-5-32-560 	Builtin\Windows Authorization Access Group 	An alias. Members of this group have access to the computed tokenGroupsGlobalAndUniversal attribute on User objects.
S-1-5-32-561 	Builtin\Terminal Server License Servers 	An alias. A group for Terminal Server License Servers. When Windows Server 2003 Service Pack 1 is installed, a new local group is created.
S-1-5-32-562 	Builtin\Distributed COM Users 	An alias. A group for COM to provide computer-wide access controls that govern access to all call, activation, or launch requests on the computer.
S-1-5-32-568 	Builtin\IIS_IUSRS 	An alias. A built-in group account for IIS users.
S-1-5-32-569 	Builtin\Cryptographic Operators 	A built-in local group. Members are authorized to perform cryptographic operations.
S-1-5-domain-571 	Allowed RODC Password Replication Group 	Members in this group can have their passwords replicated to all read-only domain controllers in the domain.
S-1-5-domain-572 	Denied RODC Password Replication Group 	Members in this group can't have their passwords replicated to all read-only domain controllers in the domain.
S-1-5-32-573 	Builtin\Event Log Readers 	A built-in local group. Members of this group can read event logs from a local computer.
S-1-5-32-574 	Builtin\Certificate Service DCOM Access 	A built-in local group. Members of this group are allowed to connect to Certification Authorities in the enterprise.
S-1-5-32-575 	Builtin\RDS Remote Access Servers 	A built-in local group. Servers in this group enable users of RemoteApp programs and personal virtual desktops access to these resources. In internet-facing deployments, these servers are typically deployed in an edge network. This group needs to be populated on servers that are running RD Connection Broker. RD Gateway servers and RD Web Access servers used in the deployment need to be in this group.
S-1-5-32-576 	Builtin\RDS Endpoint Servers 	A built-in local group. Servers in this group run virtual machines and host sessions where users RemoteApp programs and personal virtual desktops run. This group needs to be populated on servers running RD Connection Broker. RD Session Host servers and RD Virtualization Host servers used in the deployment need to be in this group.
S-1-5-32-577 	Builtin\RDS Management Servers 	A built-in local group. Servers in this group can perform routine administrative actions on servers running Remote Desktop Services. This group needs to be populated on all servers in a Remote Desktop Services deployment. The servers running the RDS Central Management service must be included in this group.
S-1-5-32-578 	Builtin\Hyper-V Administrators 	A built-in local group. Members of this group have complete and unrestricted access to all features of Hyper-V.
S-1-5-32-579 	Builtin\Access Control Assistance Operators 	A built-in local group. Members of this group can remotely query authorization attributes and permissions for resources on this computer.
S-1-5-32-580 	Builtin\Remote Management Users 	A built-in local group. Members of this group can access Windows Management Instrumentation (WMI) resources over management protocols (such as WS-Management via the Windows Remote Management service). This applies only to WMI namespaces that grant access to the user.
S-1-5-64-10 	NTLM Authentication 	A SID that's used when the NTLM authentication package authenticates the client.
S-1-5-64-14 	SChannel Authentication 	A SID that's used when the SChannel authentication package authenticates the client.
S-1-5-64-21 	Digest Authentication 	A SID that's used when the Digest authentication package authenticates the client.
S-1-5-80 	NT Service 	A SID that's used as an NT Service account prefix.
S-1-5-80-0 	All Services 	A group that includes all service processes that are configured on the system. Membership is controlled by the operating system. SID S-1-5-80-0 equals NT SERVICES\ALL SERVICES. This SID was introduced in Windows Server 2008 R2.
S-1-5-83-0 	NT VIRTUAL MACHINE\Virtual Machines 	A built-in group. The group is created when the Hyper-V role is installed. Membership in the group is maintained by the Hyper-V Management Service (VMMS). This group requires the Create Symbolic Links right (SeCreateSymbolicLinkPrivilege) and the Log on as a Service right (SeServiceLogonRight).
Registry hive 	Supporting files
HKEY_LOCAL_MACHINE\SAM 	Sam, Sam.log, Sam.sav
HKEY_LOCAL_MACHINE\Security 	Security, Security.log, Security.sav
HKEY_LOCAL_MACHINE\Software 	Software, Software.log, Software.sav
HKEY_LOCAL_MACHINE\System 	System, System.alt, System.log, System.sav
HKEY_CURRENT_CONFIG 	System, System.alt, System.log, System.sav, Ntuser.dat, Ntuser.dat.log
HKEY_USERS\DEFAULT 	Default, Default.log, Default.sav
HKEY_CURRENT_USER 	Contains the root of the configuration information for the user who is currently logged on. The user's folders, screen colors, and Control Panel settings are stored here. This information is associated with the user's profile. This key is sometimes abbreviated as HKCU.
HKEY_USERS 	Contains all the actively loaded user profiles on the computer. HKEY_CURRENT_USER is a subkey of HKEY_USERS. HKEY_USERS is sometimes abbreviated as HKU.
HKEY_LOCAL_MACHINE 	Contains configuration information particular to the computer (for any user). This key is sometimes abbreviated as HKLM.
HKEY_CLASSES_ROOT 	Is a subkey of HKEY_LOCAL_MACHINE\Software. The information that is stored here makes sure that the correct program opens when you open a file by using Windows Explorer. This key is sometimes abbreviated as HKCR. Starting with Windows 2000, this information is stored under both the HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER keys. The HKEY_LOCAL_MACHINE\Software\Classes key contains default settings that can apply to all users on the local computer. The HKEY_CURRENT_USER\Software\Classes key contains settings that override the default settings and apply only to the interactive user. The HKEY_CLASSES_ROOT key provides a view of the registry that merges the information from these two sources. HKEY_CLASSES_ROOT also provides this merged view for programs that are designed for earlier versions of Windows. To change the settings for the interactive user, changes must be made under HKEY_CURRENT_USER\Software\Classes instead of under HKEY_CLASSES_ROOT. To change the default settings, changes must be made under HKEY_LOCAL_MACHINE\Software\Classes. If you write keys to a key under HKEY_CLASSES_ROOT, the system stores the information under HKEY_LOCAL_MACHINE\Software\Classes. If you write values to a key under HKEY_CLASSES_ROOT, and the key already exists under HKEY_CURRENT_USER\Software\Classes, the system will store the information there instead of under HKEY_LOCAL_MACHINE\Software\Classes.
HKEY_CURRENT_CONFIG 	Contains information about the hardware profile that is used by the local computer at system startup.
Name 	Data type 	Description
Binary Value 	REG_BINARY 	Raw binary data. Most hardware component information is stored as binary data and is displayed in Registry Editor in hexadecimal format.
DWORD Value 	REG_DWORD 	Data represented by a number that is 4 bytes long (a 32-bit integer). Many parameters for device drivers and services are this type and are displayed in Registry Editor in binary, hexadecimal, or decimal format. Related values are DWORD_LITTLE_ENDIAN (least significant byte is at the lowest address) and REG_DWORD_BIG_ENDIAN (least significant byte is at the highest address).
Expandable String Value 	REG_EXPAND_SZ 	A variable-length data string. This data type includes variables that are resolved when a program or service uses the data.
Multi-String Value 	REG_MULTI_SZ 	A multiple string. Values that contain lists or multiple values in a form that people can read are generally this type. Entries are separated by spaces, commas, or other marks.
String Value 	REG_SZ 	A fixed-length text string.
Binary Value 	REG_RESOURCE_LIST 	A series of nested arrays that is designed to store a resource list that is used by a hardware device driver or one of the physical devices it controls. This data is detected and written in the \ResourceMap tree by the system and is displayed in Registry Editor in hexadecimal format as a Binary Value.
Binary Value 	REG_RESOURCE_REQUIREMENTS_LIST 	A series of nested arrays that is designed to store a device driver's list of possible hardware resources the driver or one of the physical devices it controls can use. The system writes a subset of this list in the \ResourceMap tree. This data is detected by the system and is displayed in Registry Editor in hexadecimal format as a Binary Value.
Binary Value 	REG_FULL_RESOURCE_DESCRIPTOR 	A series of nested arrays that is designed to store a resource list that is used by a physical hardware device. This data is detected and written in the \HardwareDescription tree by the system and is displayed in Registry Editor in hexadecimal format as a Binary Value.
None 	REG_NONE 	Data without any particular type. This data is written to the registry by the system or applications and is displayed in Registry Editor in hexadecimal format as a Binary Value
Link 	REG_LINK 	A Unicode string naming a symbolic link.
QWORD Value 	REG_QWORD 	Data represented by a number that is a 64-bit integer. This data is displayed in Registry Editor as a Binary Value and was introduced in Windows 2000.
    Get-Item – get a registry key
    New-Item — create a new registry key
    Remove-Item – delete a registry key
    Get-ItemProperty – get the value of a registry parameter
    Set-ItemProperty – change the value of a registry parameter
    New-ItemProperty – create registry parameter
    Rename-ItemProperty – rename parameter
    Remove-ItemProperty — remove registry parameter

Get-Item –Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching
To get the value of a registry key parameter, use the Get-ItemProperty cmdlet.

$DriverUpdate = Get-ItemProperty –Path ‘HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching’
$DriverUpdate.SearchOrderConfig
Changing Registry Value with PowerShell

To change the value of the SearchOrderConfig reg parameter, use the Set-ItemProperty cmdlet:

Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching' -Name SearchOrderConfig -Value 0

Make sure that the parameter value has changed:

Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching' -Name SearchOrderConfig

How to Create a New Register Key or Parameter with PowerShell?

To create a new registry key, use the New-Item command. Let’s create a new key with the name NewKey:

$HKCU_Desktop= "HKCU:\Control Panel\Desktop"
New-Item –Path $HKCU_Desktop –Name NewKey

Now let’s create a new parameter in a new registry key. Suppose we need to create a new string parameter of type REG_SZ named SuperParamString and value filetmp1.txt:

New-ItemProperty -Path $HKCU_Desktop\NewKey -Name "SuperParamString" -Value ”filetmp1.txt”  -PropertyType "String"

If you need to check if a specific registry key exists, use the Test-Path cmdlet:

Test-Path 'HKCU:\Control Panel\Desktop\NewKey'

The following PowerShell script will check if a specific registry value exists, and if not, create it.

regkey='HKCU:\Control Panel\Desktop\NewKey'
$regparam='testparameter'
if (Get-ItemProperty -Path $regkey -Name $regparam -ErrorAction Ignore)
{ write-host 'The registry entry already exist' }
else
{ New-ItemProperty -Path $regkey -Name $regparam -Value ”woshub_test”  -PropertyType "String"  }

Using the Copy-Item cmdlet, you can copy entries from one registry key to another:

$source='HKLM:\SOFTWARE\7-zip\'
$dest = 'HKLM:\SOFTWARE\backup'
Copy-Item -Path $source -Destination $dest -Recurse

If you want to copy everything, including subkeys, add the –Recurse switch.
Deleting a Registry Key or Parameter

The Remove-ItemProperty command is used to remove a parameter in the registry key. Let’s remove the parameter SuperParamString created earlier:

$HKCU_Desktop= "HKCU:\Control Panel\Desktop"
Remove-ItemProperty –Path $HKCU_Desktop\NewKey –Name "SuperParamString"

You can delete the entire registry key with all its contents:

Remove-Item –Path $HKCU_Desktop\NewKey –Recurse

To remove all items in the reg key (but not the key itself):

Remove-Item –Path $HKCU_Desktop\NewKey\* –Recurse
How to Rename a Registry Key or a Parameter?

You can rename the registry parameter with the command:

Rename-ItemProperty –path ‘HKCU:\Control Panel\Desktop\NewKey’ –name "SuperParamString" –newname “OldParamString”

In the same way, you can rename the registry key:

Rename-Item -path 'HKCU:\Control Panel\Desktop\NewKey' OldKey
Search Registry for Keyword Using PowerShell

PowerShell allows you to search the registry. The next following searches the HKCU:\Control Panel\Desktop for parameters, whose names contain the *dpi* key.

$Path = (Get-ItemProperty ‘HKCU:\Control Panel\Desktop’)
$Path.PSObject.Properties | ForEach-Object {
If($_.Name -like '*dpi*'){
Write-Host $_.Name ' = ' $_.Value
}
}

To find a registry key with a specific name:

Get-ChildItem -path HKLM:\ -recurse -ErrorAction SilentlyContinue | Where-Object {$_.Name -like "*woshub*"}

n the following example, we will modify the ACL in this registry key to grant write access to the built-in Users group.

Get current permissions:

$rights = Get-Acl -Path 'HKCU:\Control Panel\Desktop\NewKey'

Specify the user or group you want to grant access to:

$idRef = [System.Security.Principal.NTAccount]"BuiltIn\Users"

Select access level:

$regRights = [System.Security.AccessControl.RegistryRights]::WriteKey
Set permissions inheritance settings :

$inhFlags = [System.Security.AccessControl.InheritanceFlags]::None
$prFlags = [System.Security.AccessControl.PropagationFlags]::None

Access type (Allow/Deny):

$acType = [System.Security.AccessControl.AccessControlType]::Allow
Create an access rule:

$rule = New-Object System.Security.AccessControl.RegistryAccessRule ($idRef, $regRights, $inhFlags, $prFlags, $acType)

Add a new rule to the current ACL:

$rights.AddAccessRule($rule)

Apply new permissions to the registry key:

$rights | Set-Acl -Path 'HKCU:\Control Panel\Desktop\NewKey'

Getting a Registry Value from a Remote Computer via PowerShell

PowerShell allows you to access the registry of a remote computer. You can connect to a remote computer either using WinRM (Invoke-Command or Enter-PSSession). To get the value of a registry parameter from a remote computer:

Invoke-Command –ComputerName srv-fs1 –ScriptBlock {Get-ItemProperty -Path 'HKLM:\System\Setup' -Name WorkingDirectory}

Or using a remote registry connection (the RemoteRegistry service must be enabled)

$Server = "lon-fs1"
$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $Server)
$RegKey= $Reg.OpenSubKey("System\Setup")
$RegValue = $RegKey.GetValue("WorkingDirectory")

high risk locations


HKLM\Software\Microsoft\Windows\CurrentVersion\Run

HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce

HKU\<SID>\Software\Microsoft\Windows\CurrentVersion\Run

HKU\<SID>\Software\Microsoft\Windows\CurrentVersion\RunOnce

HKLM\SYSTEM\CurrentControlSet\services

HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders

HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders

HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon


Linux 
bash 

history = display history 

ctrl r = search

shift g = takes you to the bottom of the man page

g = takes you to the top

/(word) = is the control f for man

n = is the movement command for man

pwd = where you are

$home = home directory 

touch = creates file 
example: touch newfile

touch -t = time editing 

touch -r = copy time of another file

mkdir = new file

mkdir -p = allows nesting 
example newfolder/newsubfolder

rmdir = remove folder 

rmdir -p = removes folders and nested folder 
example: rmdir -p newfolder/newsubfolder

ls = displays whats in the directory
ls, ls -lisa

cat = view 

symbiotic link  = ln -s (filename)

Cat = view 
head = first 10 lines 
tail = last 10 lines 
more = one screen at a time 
less = less info

find (path of file or search location) -iname (searched thing) = not case sensitive find 
find (path of file or search location) -inum
find (path of file or search location) (option) (searched thing) 2>/dev/null =  sends the errors to dev null
find (path of file or search location) -size = the size
find (path of file or search location) -maxdepth (number) = how many folders deep to go into
find (path of file or search location) -user student = shows things that student owns
find (path of file or search location) - maxdepth -d 2 = shows 2 directories deep
find (path of file or search location) -name *.txt = finds txt files 
find -empty = finds empty directories 
find -size = finds file sizes
find $HOME/1123 -name *.txt ! -name *~.txt -exec cp {} $HOME/1123 $HOME/CUT \;
modified access created times = mac times 

find / -atime (3) = find what was access in the last 3 days
find / -ctime (3) = find what was created in the last 3 days
find / -mtime (3) = find what was modified in the last 3 days
find / -cmin = find what was created in the last hour
find / -amin = find what was access in the last hour
find / -mmin = find what was modified in the last hour
find / -executable ! -d = searches for executables excluting directories 
find / -type d -iname log -exec ls -l {} \; 2>/dev/null = searchs for directories named log then executs a ls -l on it 
find /var/log -iname *.log -exec ls -la {} \; 2>/dev/null
find var/log -iname *.log 2>/dev/nullv= -printf "%i %f\n"
%i = inodes 
%f =files
-name = find option that specifies name 
-iname = not case sensitive option

touch {1..10}.txt = expample of brace expansion, basically creats as many as there are in the brackets 

cat /etc/passwd | grep (what you want to search)
egrep "student|root|randomuser" /etc/password
egrep '^[a-zA-Z]' (dir you want to search)
cat /etc/passwd | grep -o /home.*/ = -o means only matching 
cat /etc/passwd | grep -n home = -n gives line numbers
cat /etc/passwd | grep -v 
grep -C3 'root' /etc/passwd = -c3 shows 3 lines before and after the found line
grep -A3 'root' /etc/passwd = -a3 shows 3 lines after the found line
grep -B3 'root' /etc/password = -b3 shows 3 lines before the found line 


ps -u student = -u shows process ran but student 
ps --forest = proccess version of tree shows the parent child format in the process 


kill -9 PID 
more /etc/passwd | cut -d: -f1 = this isolates the first field in the more of /etc/passwd 
more /etc/passwd | cut -d: -f2- = this prints the second field and everything to the right 
more /etc/passwd | cut -d: -f1-4 = this prints 1-4
more /etc/passwd | cut -c3-10 = the -c is for charactors 
more /etc/passwd | cut -d- -f1- -s = -s is for specifics 
echo "cosc zero seven" | cut -d" " -f2 --complement = everything but f2
cut = cuts on a delimiter
-f = shows everything to the left
\ = split longs commands into mutiple lines 
| = appends 
&& = and 
|| = or 
cp = copys file 
move = moves file
2>/dev/null = sends errors to null
>> = appends
> = overwrite


tail passwd | awk -F: '{print $1,$3}' = prints fields 1 and 3 
tail passwd | awk -F: '{print $NF}' = prints the last field
awk = more powerful and specific cut
$NF = is the last field
-F = diliminator 
$0 = print the entire line 
tail passwd | awk -F: 'BEIGN {OFS="#"}{print $1,$3,$6}' = changes the field separator from ' ' to '#' 
awk and cut do not change the og information but are in a sense filters
cat passwd | awk -F: '($3 >= 150){print $0}' = conditional operation
awk -v myvar=$(sed -i 's/root/groot/g' $HOME/passwd) -F: '{OFS=":"}{$1=myvar; print}'
-v = declarces varible 
-i = makes the change permanint 


sed = stream editor
A=$(cat /etc/passwd) = creates varable that can echo results
echo a
B='cat /etc/passwd'  = stores as a string but when called upon it shows /etc/passwd when echod it returns a string
sed 's/home/nobodyhome/g' passwd = substatutes home with nobodyhome in the passwd file and would substatute all instances in the file 
g = global
s = substitute 
sed 's/\/bin\/bash/\/been/\better/g' sed passwd
sed '/home/d' passwd = deletes every instances
sed -e 'xrdp/d' -e 'telnetd/d' passwd = deletes muliple lines


cat sort.txt | awk -F: '{print $1}' | sort -u = shows values in the first sector then sorts them by acii table and with -u it makes then shows one instance 
cat sort.txt | awk -F: '{print $1}' | sort -n =sorts by number
cat sort.txt | awk -F: '{print $1}' | uniq = sorts uniquly 
cat sort.txt | awk -F: '{print $1}' | uniq -c = sourts with count of occurence


alias vim='nano'  = alias gives a name for another command
alias l='ls -l' $HOME = l is now ls -l for the home directory
alais -p = shows all alias on the box
unalias vim = remove alias from command  

How to make a varible/parameter:
(var)=(content)
$ is only needed when calling upon it
A=120
B=20
epr $A - $B
100

C=$(expr $A -$B)
echo $c
100

special perameters:
echo $# = counts the aruements passed
echo $0 = shows name of script
echo $@ = positional parameter starting at one
echo $* = shows the arguments
echo $? = exit code 
echo $_ = prints out the prevoius line
echo $$ = shows PID
echo $- = shows flags
echo $! = PID of most recent background

md5sum:
echo /home/student | md5sum = hashing the string of characters that echo returns
md5sum (file) = hashes a file


functions: require 
function name 
call upon the name at the end and make sure you have the {}


LOOPS: 
for x in {1..10}; do 
> echo $x
> done
1
2
3
4
5
6
7
8
9
10


for x in $(cat ips.txt); do
> echo $x
> done
(cated the file ips.txt and showed ips)



#!/bin/bash
for x in  $(cat /etc/passwd | awk -F: '{print $1}')
            do echo $x is a user on this system
done 
(result) = prints field 1 with the is a user on this system



x=0
while true; do 
> if [[ $x -gt 10 ]] ; then
> break
> fi
> echo $x
> x=$(($x+1))
> done
0
1
2
3
4
5
6
7
8
9
10
(greater then)



while [[ $x -le '10' ]]; do
> echo $x
> x=$(($x+1))
> done
0
1
2
3
4
5
6
7
8
9
10
(less then or equal to)


ip route 
which
tar 
zip



question 1
Brace expansion is a mechanism by which arbitrary strings may be generated, 
for commands that will take multiple arguements. For the below examples, the first example is equivalent to the second command.

$ mkdir /var/log/{auth,syslog,dmesg}_log

Results in

$ mkdir /var/log/auth_log /var/log/syslog_log /var/log/dmesg_log

Activity: Using Brace-Expansion, create the following directories within the $HOME directory:

    1123
    1134
    1145
    1156

To read more on Brace Expansion, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Brace-Expansion

ANSWER:
mkdir $HOME/{1123,1134,1145,1156}



Question 2
As we learned, the following example would create five files with one command.

touch file1.txt file2.txt file3.txt passwd.txt shadow.txt

But, with Brace Expansion it can be shortened to the following.

touch file{1..3}.txt passwd.txt shadow.txt

Activity:

Use Brace-Expansion to create the following files within the $HOME/1123 directory. You may need to create the $HOME/1123 directory. Make the following files, but utilze Brace Expansion to make all nine files with one touch command.

Files to create:

    1.txt
    2.txt
    3.txt
    4.txt
    5.txt
    6~.txt
    7~.txt
    8~.txt
    9~.txt

ANSWER:
mkdir $HOME/1123
touch $HOME/1123/{1..5}.txt
touch $HOME/1123/{6..9}~.txt



Question 3 
Using the find command, list all files in $HOME/1123 that end in .txt.

Be aware that if you use Pattern Matching to locate the files you may have unintended results based on if you use quotes around the pattern or not. If you do not quote the pattern, the Bash shell interprets the pattern. If you quote the pattern, it is passed to the command for it to interpret. You can have a properly functioning command, yet unintended output, based on which of these two gets to interpret the pattern.

To read more on Pattern Matching, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching

To read more on Quoting, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Quoting

ANSWER:
find $HOME/1123 -name *.txt

Question 4:
List all files in $HOME/1123 that end in .txt. Omit the files containing a tilde (~) character.

While this activity can be accomplished with only find, it can also be combined with grep as well.

Anwser:
find $HOME/1123 -name *.txt ! -name *~.txt


Question 5:
Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.

Use only the find and cp commands. You will need to utilize the -exec option on find to accomplish this activity.

The find command uses BOOLEAN "!" to designate that it does not want to find any files or directories that follows.

ANSWER:
find $HOME/1123 -name *.txt ! -name *~.txt -exec cp {} $HOME/1123 $HOME/CUT \;


Question 6:
Using ONLY the find command, find all empty files/directories in directory /var and 
print out ONLY the filename (not absolute path), and the inode number, separated by newlines.

Tip: When using the man pages, it is better to focus your search then to visually scan 1000+ lines of text. 
Combining the output with the grep command, possibly with its -A, -B, or -C options, can help drive context driven searches of those manual pages.

Example Output

123 file1
456 file2
789 file3


ANSWER:
find /var -empty -printf "%i %f\n"

Question 7:
Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
    Write those to a text file called names in $HOME/CUT directory.
    Omit the names filename from your output.

NOTE: The output should only be the file names with no additional information. Additionally, your code will be executed twice. T
his is to ensure you have taken into account how file redirection and command execution works.

To read more on Redirecting Output, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Redirecting-Output

To read more on Simple Command Expansion, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Simple-Command-Expansion


ANSWER:
ls -p $HOME/CUT | grep -v '/$' | grep -v 'names' > $HOME/CUT/names


Question 8:
Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen, not the absolute path to the file, separating each filename with a newline. 
Ensure unneeded output is not visible.

Tip: The above inode is specific to this CTFd question and might not be in use on your Linux Opstation. 
Instead, you can test your command on your Linux OpStation against inode 999.

ANSWER:
find / -inum 4026532575 -printf "%f\n"


Question 9:
Write a basic bash script that greps ONLY the IP addresses in the text file provided (named StoryHiddenIPs in the current directory); sort them uniquely by number of times they appear.

It is not important to have a regular expression that only catches fully valid IP addresses. It is more important that you become familiar with creating and using regular expressions. Below, there are some useful websites that you can use to visually see what your regular expression pattern is matching on.

    www.regexr.com
    www.regex101.com

E.g., [1-4]{0,5}

Bracket Expression: [1-4] = 1 or 2 or 3 or 4

Repetitions: {0,5} = above numbers (1,2,3,4) appear from 0 to 5 times, meaning our number can be between 1 and 44444

Interpreted BASH Chars: . | $ ` \ ! must be escaped with \ in a regex. I.E. to match on a backslash, you must use \\ in your pattern.

Note: The basics of regular expressions are assumed knowledge for this module, and you will need to call back to prior learning. If you are in need of a quick refresher, the following man pages could be useful.

    man egrep
    man regex.7


ANSWER: 
grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' StoryHiddenIPs | sort -n | uniq -c | sort -r


Question 10: 

    Using ONLY the awk command, write a BASH one-liner script that extracts ONLY the names of all the system and user accounts that are not UIDs 0-3.
    Only display those that use /bin/bash as their default shell.
    The input file is named $HOME/passwd and is located in the current directory.
    Output the results to a file called $HOME/SED/names.txt

Tip: awk can use conditional statements, e.g. print only the line in /etc/passwd that has "root" as its first field.

awk -F: '($1 == "root") {print $0}' /etc/passwd


Answer:
cat $HOME/passwd | awk -F: '($3 > 3 && $7 == "/bin/bash"){print $1}' > $HOME/SED/names.txt


QUESTION 11:

    Write a Bash script using "Command Substitution" to replace all passwords, using openssl, from the file $HOME/PASS/shadow.txt with the MD5 encrypted password: Password1234, with salt: bad4u
    Output of this command should go to the screen/standard output.
    You are not limited to a particular command, however you must use openssl. Type man openssl passwd for more information.

TIP: While not required, using awk is possibly the most straightforward method of accomplishing this activity. Keep in mind that awk is its own programming language. 
It can not use Bash variables unless you import them in. Below is a break down of applicable parts of an awk command, with descriptions of each part. 
See if you can use this example as a jumping off point to accomplish the end state of the activity.

#!/bin/bash 

a=”New name to place in field one” 
awk -F: -v "awk_var=$a" 'BEGIN {OFS=":"} {$1=awk_var} {print $1,$NF}' /etc/passwd

# '-F' is used to change the default field seperator of " ".  In this example, it   \
# now designates ':'

# '-v' designates or imports a variable into AWK.  In the above example, 'awk_var' is   \
# declared with the Bash variable of '$a'.

# The 'BEGIN' pattern(s) tells AWK to execute action parts of the pattern before any of \
# the input is read.  In this case, the 'OFS', or 'Output Field Seperator' will place   \
# colons between the firelds being printed in the output.  As well, it will replace the \
# first field (i.e. '$1') with whatever data is contained in the AWK variable declared  \
# previously.

# The '{print}' statement designates whatever the desired fields are to print.  '$0' is \
# the variable for the entire line.  The first field is '$1', the second field is '$2', \
# and so on.  AWK has a builtin variable, '$NF' which evaluates to the number of fields \
# on a line.  Use this as a shortcut if you need to print the last field on the line.

To read more on Shell Expansion, go to the following resource:

    https://www.gnu.org/software/bash/manual/html_node/Shell-Expansions.html#Shell-Expansions

To read more on the Shadow file format, go to the following resource:

    man shadow.5


ANSWER:
#!/bin/bash
a=$(openssl passwd -1 -salt bad4u Password1234) 
awk -F: -v "var=$a" 'BEGIN {OFS=":"} {$2=var} {print $0}' $HOME/PASS/shadow.txt


Question 12:

    Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.

TIP: When designating a path in a sed command, you must escape the path characters if they are to be interpreted as part of the string

sed '/\/bin/d' file.txt



Answer:
sed -e '/\/bin\/sh/d' -e '/\/bin\/false/d' $HOME/passwd>  $HOME/PASS/passwd.txt


QUESTION 13:

    Using find, find all files under the $HOME directory with a .bin extension ONLY.
    Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
    Ensure there is no trailing / at the end of the directory path when outputting to standard output.
    You may need to sort the output depending on the command(s) you use. Have each path displayed only once.

Tip: For stripping the filename out of the output, there are different ways that this can be accomplished based on what you have learned so far.

    Utilizing -printf options on find.
    Utilizing awk to manipulate the fields. This may leave the trailing / if you don't take that into account.
    Utilizing the rev and cut commands creatively.


Answer: 
find $HOME -type f -iname "*.bin" 2>/dev/null | rev | cut -d/ -f2- | rev | sort -u



QUESTION 14:
Write a script that will do the following.

    Write a script which will copy the last entry/line in the passwd-like file specified by the $1 positional parameter
    Modify the copied line to change:
        User name to the value specified by $2 positional parameter
        Used id and group id to the value specified by $3 positional parameter
        Home directory to a directory matching the user name specified by $2 positional parameter under the /home directory (i.e. if the $2 was 'Chris', the new line would have /home/Chris as its home directory)
        The default shell to `/bin/bash'
    Append the modified line to the end of the file

Example INPUT file's last line.

games:x:5:60::/usr/games:/usr/sbin/nologin

If positional parameter 2 was passed "devildog" and positional paramter 3 was passed "9001", after modifications the appended line would look like this.

devildog:x:9001:9001::/home/devildog:/bin/bash

Tip: awk provides the simplest method for completing this activity. 
Refer back to your notes on "09 - BASH Activity" if you are in need of starting point on this activity.

Note: The contents of the passwd-like file will be randomly generated on each submission. It is intended to read the last line once and store it in a variable.

To read more on Positional Parameters, go to the following resource:

    https://www.gnu.org/software/bash/manual/bash.html#Positional-Parameters

To read more on the Passwd file format, go to the following resource:

    man passwd.5


ANSWER:
name=$2
uid=$3
file=$1
base=$(tail -1 $file)
echo $base |
awk -F: -v "awkname=$name" -v "awkuid=$uid" 'BEGIN {OFS=":"} {$1=awkname} {$3=awkuid} {$4=awkuid} {$6="/home/"awkname} {$NF="/bin/bash"} {print $0}' >> $file


QUESTION 15:

    Find all executable files under the following four directories:
        /bin
        /sbin
        /usr/bin
        /usr/sbin
    Sort the filenames with absolute path, and get the md5sum of the 10th file from the top of the list.

Tip: In the below example, you can see the different uses of md5sum. While not wrong, the first command is hashing the string output of the the find command. In the second, md5sum is hashing the file contents of the given file, which is what is intended for this activity. You can also tell the second method hashed the file as the file name is listed in the hash output; the first only lists a hyphen indicating a string was hashed. For this activity, to provide md5sum with the 10th file of the sorted output, it is recommended to use Command Subtitution.

[chris@localhost ~]$ find /etc -maxdepth 1 -name passwd | md5sum
9231fb35b4431d59eae53a8c0d673231  -
[chris@localhost ~]$ md5sum /etc/passwd
62f5fa5100adcee3305cf979b5734a3e  /etc/passwd


ANSWER:
A=$(find /bin /sbin /usr/bin /usr/sbin -executable -type f| sort |head -10 | tail -1)
md5sum $A | cut -d' ' -f1


QUESTION 16:

    Write a script which will find and hash the contents 3 levels deep from each of these directories: /bin /etc /var
    Your script should:
        Exclude file type named pipes. These can break your script.
        Redirect STDOUT and STDERR to separate files.
        Determine the count of files hashed in the file with hashes.
        Determine the count of unsuccessfully hashed directories.
        Have both counts output to the screen with an appropriate title for each count.

Example Output:

Successfully Hashed Files: 105
Unsuccessfully Hashed Directories: 23


ANSWER:
dirs=' /bin /etc/ var'
find $dirs -maxdepth 3! -type p -exec md5sum {} \; > STDOUT.txt 2>STDERR.txt
good=$(cat STDOUT.txt |wc -l)
bad=$(egrep "Is a" STDERR.txt | wc -l)
echo "Successfully Hashed Files: $good"
echo "Unsuccessfully Hashed Directories: $bad"


A=$(find /bin /etc /var -maxdepth 3 ! -type p -exec md5sum {}\; > $HOME/goodhash 2>$HOME/badhash)
B=$(cat $HOME/badhash | grep -v "Permission denied" | wc -l)
C=$(cat $HOME/goodhash | wc -l)
echo "Successfully Hashed Files:" $C
echo "Unsuccessfully Hashed Directories:" $B

linux file system

permisson 
Perm 	Relative 	Octal 	On a File 	                      On a Directory

read      r           4     Read the contents of the file     List the contents of the directory

write     w           2     Write content into a file         Create/delete in the directory

exe       x           1     Run the file as an executable     Move into the directory


ssh -J adi


windows 
services 
bcdedit = how to change the boot configureation
sc query = list services and can add the direct service to get a specific one
tasklist \svc
get-service




linux boot


Big Mike Got Killed In Russia 1 (SysV)

    BIOS -Basic Input Output System

    MBR -Master Boot Record

    GRUB -Grand Unified Bootloader

    Kernel

    Init (SysV or SystemD)

    Runlevels


    The machine’s BIOS or boot firmware loads and runs a boot loader.

    The boot loader(“Grub” located in MBR) finds the kernel image on disk, loads it into memory, and starts it.

    The kernel initializes the devices and its drivers.

    The kernel mounts the root filesystem.

    The kernel starts a program called init with a process ID of 1. This point is the user space start.

    Init sets the rest of the system processes in motion via pre-configured runlevels.

https://git.cybbh.space/os/public/raw/master/images/sysV_systemd_boot_process.png


Big Mike Got Killed In Russia (SysV)

    BIOS

        First program to run on startup (Flash or ROM)

            If stored in flash memory → becomes a target for BIOS Rootkits

        Performs POST - Power On Self Test

        Performs system integrity checks

        Builds a device tree (mice, keyboard, hard drive, video cards, etc..)

        Reads and executes the first sector on the boot disk (MBR) to load bootloader to memory
    

MBR - Master Boot Record

        Located at the very beginning of the bootable disk (512 bytes) and contains the primary bootloader, partition table and MBR validity check

        Contains code for GRUB - Grand Unified Boot Loader

        (Note: Could also contain LILO - Linux Loader)

MBR

    First 512 bytes of the HD

    Hard disks utilizing a MBR can have a maximum of 4 primary partitions and a max size of 2 TB each.

        Typically the MBR is located on /dev/hda or /dev/sda (/dev/vda)

        It contains information about GRUB (or LILO or other Boot Loader system)

    Other related commands:

        du - disk usage: summarize disk usage of the set of FILEs

        df - disk free : displays the amount of disk space available on the file system

        lsblk - lists information about all available - or specified - block devices


    GRUB - Grand Unified Bootloader

        Dynamically configurable with the capability to make changes during boot

            Config File - /boot/grub/menu.lst

            Altering boot entries, selecting different kernels, and modifying the initial RAM disk (initrd)

        OS Selection screen where if no choice is made, default kernel specified in the grub configuration file

        Bootloader (GRUB) passes text based kernel parameters (Ex. root=UUID=70cc6e89…,ro, splash). If not recognized, the option will be passed to init (i.e. ‘-s’ for single-user mode)

        Kernel options are sometimes configurable at the menu with the ‘e’ key

    Kernel

        Uncompresses itself into RAM

        Establishes memory management, detects CPU type, page tables

        Mounts the root ‘/ ’ filesystem

        kernel is process 0 [kthreadd]

        Executes /sbin/init or systemd daemon, the very first process started by the kernel with a process ID (PID) of 1

        ‘ls -l /sbin/init’ to determine which Init system you are using



    Configures the environment for the system

        Looks at the /etc/inittab

        Available run levels 0 - 6

        Identifies the default 'init' run level from /etc/inittab and uses that to load all the appropriate programs

        The entire startup process is handled by scripts

            /etc/init.d/

            Scripts that run ‘S’tart and ‘K’ill scripts out of applicable rc folders

        'service <service name> start | stop | restart | status | reload | …​''

        ‘service --status-all’

    inittab line descriptions (rc = run commands)

        All lines in inittab take the following form, with four fields separated by colons in this order:

            A unique identifier (a short string, such as id in the previous example)

            The applicable runlevel number(s)

            The action that init should take (default runlevel to 5 in the previous example)



    Loads system in parallel and from binaries (faster and more secure)

    Instead of runlevels, uses 'targets' that point to other dependencies based on the features of the environment desired

        ‘default.target’ is essentially the default runlevel (equivalent to id:5:initdefault in /etc/inittab). Use ‘systemctl get-default’ to find it, and ‘systemctl set-default’ to change it.

    ‘systemctl list-dependencies’ shows all the services running under default.target

    Uses 'systemctl’ to manage system (backwards compatible)

        ‘systemctl status <application>.service’

        ‘systemctl list-units’

    Config: /etc/systemd/ and /etc/systemd/system



    /lib/systemd/system 'ls -l | grep -v wants | grep run’

        runlevel0.target - > poweroff.target

        runlevel1.target - > rescue.target

        runlevel2.target - > multi-user.target

        runlevel3.target - > multi-user.target

        runlevel4.target - > multi-user.target

        runlevel5.target - > graphical.target

        runlevel6.target - > reboot.target


    A runlevel is a software configuration where only a select group of processes exist

        0 - halt (Do NOT set initdefault to this)

        1 - Single user mode (switched from multi-user)

        2 - Multiuser, without networking

        3 - Full multiuser mode, with networking

        4 - unused

        5 - X11 (GUI)

        6 - reboot (Do NOT set initdefault to this)

    ‘ls -l /etc/rc<1-6>.d’ to see different services run in each runlevel

        If running something other than an init.d service, then probably malicious

Partitions

    BLOCK DEVICE (Physical or Virtual) >> Partition Table >> Logical Partition >> Filesystem (ext3,ext4,FAT)

    Hard disks, USBs, SD cards, or anything with storage space must have at least one partition in order to be used

    Multiple partitions can exist on a single storage device, and you can format each partition with a different file system

    A partition is the logical segmentation of a single storage device into multiple usable sections

    Two main types of HD Partitioning:

        MBR - Master Boot Record

        GPT - GUID (Globally Unique Identifiers) Partition Table

Resources

    sysv vs systemd

    inittab

    linux boot process

    bios and uefi

    Grub2 / Grub Manual






xxd = hexdump
dd  = bit for bit copy



persistance in /etc/init.d, /etc/profile.d, /etc/envirment and /etc/.bash_profile /etc/rc#.d

windows validity

How do we discover Normal, abnormal, and Hidden Processes and Services?

    Get-Process SMSS,CSRSS,LSASS | Sort -Property Id

Do boot processes have descriptions?

    Get-Process | Select Name, Id, Description | Sort -Property Id

Where do the system processes and services normally run from? (C:\Windows\System32)

    Get-Process | Select Name, Id, Path

    Get-Ciminstance Win32_service | Select Name, Processid, Pathname

    get-process -name "*chrome*" | select-object -expandproperty Modules | more 

    get-process | select name, id, description, path | sort -property id more


C:\Windows\System32\ntdll.dll

    get-process -name "*chrome*" | select-object -ExpandProperty modules | where modulename -like '*chrome*' | more

    get-ciminstance 

    get-ciminstance services | select name,processid,parentprocessid,path | ft -wrap | more

    get-ciminstance win32_service | select name,processid, pathname | more
    
    Are Priority Levels of processes important?

        Get-Process | Select Name, Priorityclass

        Tasklist /m

Discovering Hidden Processes, Services, and finding Normal and Abnormal Activity

    Q: What are some additional ways that Malware hides?

Discovering Hidden Processes, Services, and finding Normal and Abnormal Activity

    Q: How would malware use Schedule Task?

        schtasks /query | more

        Get-ScheduledTask | Select * | Select -First 5


