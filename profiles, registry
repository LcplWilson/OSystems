stack number 4 ip address 10.50.44.37 
https://os.cybbh.io/public/os/latest/index.html
https://vta.cybbh.space/horizon/project/instances/
https://os.cybbh.io/public/os/latest/index.html
CTFD server http://10.50.24.129:8000/
ELWI-M-007
m23007
#get Powershell version
get-host | select version

#read a file 
Get-Content -path "c:\file path"
cat 
#get help 
get-help
get-help Get-Process
get-help get -process -Online
program location
#et-Location
pwd 
#get alias 
get alias pwd 
#get member 
get-process |  get-member
get-process
get-process | select-object processname, id
#dot notatiom
(get-proess).name
#rocess control
start-process notepad.exe
stop-process notpad.exe
stop-process.note
#pipline
Get-process | selet-object name,id, path | where-object {$_.id -lt '1000')
#CIM
get-CimClass
Get-wmiobject -class Win32_logicaldisk -filter "drivdetyp=3"

#foreeach
$letterarray = "a", "b", "C"
foreach ($x in $letterarray)
{
Write-Host $x 
}
#if...if condition is met it will execute the scriptbook
$a =3
if ($a -gt 2){
    write-host "the value $a is than 2"
    }


    if ($a -gt 2) {
    write-host "the valuse is greater then 2"
    }
    elseif ($a -eq 2){
    write-host "the value $a is equal than 2"
    }
    else { 
    write-host "the value is less then 2"
    }

    #variables 
    #create a varible
    $myvarible = get=process 
    $myvariable
    clear-variable -name -$myvariable
    #get rid of variable 
    remove-variable -name  myvarible 
    #variable/command substitution and dot property

    $today = (get-date).DateTime
    $today
    #automatic variables 
    get-help about_automatic_ variables
   
    *$profile 

#execution polict, can i run .ps1 powershell scriptd
Get-ExecutionPolicy
#comparison opperator
Get-Service | where-object {$_.status -eq "stopped"}
get-service | where {$_.Name -like "*xbox*" }
#powershell profiles is a form of persistance it withstands reboots
$profile #$profile is an automatic varible 
test-path -path $profile.AllUsersAllHosts
test-path -path $profile.AllUserscurrenthost 
test-path -path $profile.CurrentUserAllHosts
test-path -path $profile.CurrentUserCurrentHost
get-content -path $profile.CurrentUserCurrentHost
cat -path $profile.CurrentUserCurrentHost

#create profile 
new-item -itemtype file -path $profile.CurrentUserCurrentHost -force 

registry 
Different tools to view/manipulate the registry

    regedit.exe

        GUI

        Located at "C:\Windows\regedit.exe"

    reg.exe

        CLI

        Located at "C:\Windows\System32\reg.exe"

        Minimum commands to know

            Reg add, reg query, reg delete

Different tools to view/manipulate the registry

    Powershell

        Root Hive Keys loaded as powershell drives

        Commands used

            get-item, get-itemproperty, get-childitem

            set-itemproperty, new-item, new-itemproperty

Mount a Remote Registry via Regedit GUI

Open the Regedit GUI
Click on *File* => *Connect Network Registry*
Type *File-Server*
Click on *Check Names* Button (File-Server will become underlined)
Click *OK*

Powershell & CMD Line Commands for sethc.exe Demo

    CLI:

        reg add "hklm\software\microsoft\windows nt\currentversion\image File Execution Options\sethc.exe" /v "Debugger" /t reg_sz /d "c:\Windows\System32\cmd.exe"

    Powershell:

        new-item "hklm:\software\microsoft\windows nt\currentversion\image File Execution Options\sethc.exe"

        New-ItemProperty -path "hklm:\software\microsoft\windows nt\currentversion\image File Execution Options\sethc.exe" -Name Debugger -Type String -Value C:\Windows\System32\cmd.exe
Mount a Registry Hive With PSDrive

    Create Temporary or Permanent connections to navigate the registry

        New-PSDrive -Name HKU -PSProvider Registry -Root HKEY_USERS

Using the Registry

    Outcome: The "Using the Registry" section covers the practical uses of the Windows Registry for both offensive and defensive purposes. Cover that any changes are only used if the process reads the new value from the registry. Cover the registries most commonly used for persistence. Cover the registries most commonly used for forensics.

Registry Changes

    Often require restart

        Either entire system or just a program

    Some changes take effect immediately

    Some parts of registry are always in memory

Registry locations that can be utilized for persistence

    HKLM\Software\Microsoft\Windows\CurrentVersion\Run

    HKU\<SID>\Software\Microsoft\Windows\CurrentVersion\Run

    HKLM\SYSTEM\CurrentControlSet\services

    HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders

    HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders

    HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
Interesting Registry Locations

    HKLM\BCD00000000

        Replacement of old boot.ini file

    HKLM\SAM\SAM

        Use "psexec -s -i regedit" from administrator cmd.exe to view the SAM

    HKU\<SID>\Software\Policies\Microsoft\Windows\System\Scripts

        Group policy Logon/Logoff Scripts defined here

Baselining the Registry

    Determining if the registry has been compromised

        Suspicious behavior

        Potenially malicious application removed from file system, but traces of application keep appearing

    Importance of baselining

Value 	Universal well-known SID 	Identifies
S-1-0-0 	Null SID 	A group with no members. This is often used when a SID value isn't known.
S-1-1-0 	World 	A group that includes all users.
S-1-2-0 	Local 	Users who sign in to terminals that are locally (physically) connected to the system.
S-1-2-1 	Console Logon 	A group that includes users who are signed in to the physical console.
S-1-3-0 	Creator Owner ID 	A security identifier to be replaced by the security identifier of the user who created a new object. This SID is used in inheritable access control entries (ACEs).
S-1-3-1 	Creator Group ID 	A security identifier to be replaced by the primary-group SID of the user who created a new object. Use this SID in inheritable ACEs.
S-1-3-2 	Owner Server 	A placeholder in an inheritable ACE. When the ACE is inherited, the system replaces this SID with the SID for the object's owner server and stores information about who created a given object or file.
S-1-3-3 	Group Server 	A placeholder in an inheritable ACE. When the ACE is inherited, the system replaces this SID with the SID for the object's group server and stores information about the groups that are allowed to work with the object.
S-1-3-4 	Owner Rights 	A group that represents the current owner of the object. When an ACE that carries this SID is applied to an object, the system ignores the implicit READ_CONTROL and WRITE_DAC permissions for the object owner.
S-1-4 	Non-unique Authority 	A SID that represents an identifier authority.
S-1-5 	NT Authority 	A SID that represents an identifier authority.
S-1-5-80-0 	All Services 	A group that includes all service processes configured on the system. Membership is controlled by the operating system.
Identifier authority 	Value 	SID string prefix
SECURITY_NULL_SID_AUTHORITY 	0 	S-1-0
SECURITY_WORLD_SID_AUTHORITY 	1 	S-1-1
SECURITY_LOCAL_SID_AUTHORITY 	2 	S-1-2
SECURITY_CREATOR_SID_AUTHORITY 	3 	S-1-3
SECURITY_NT_AUTHORITY 	5 	S-1-5
SECURITY_AUTHENTICATION_AUTHORITY 	18 	S-1-18
Relative identifier authority 	Value 	Identifier authority
SECURITY_NULL_RID 	0 	S-1-0
SECURITY_WORLD_RID 	0 	S-1-1
SECURITY_LOCAL_RID 	0 	S-1-2
SECURITY_CREATOR_OWNER_RID 	0 	S-1-3
SECURITY_CREATOR_GROUP_RID 	1 	S-1-3
SID 	Display name 	Description
S-1-5-1 	Dialup 	A group that includes all users who are signed in to the system via dial-up connection.
S-1-5-113 	Local account 	You can use this SID when you're restricting network sign-in to local accounts instead of "administrator" or equivalent. This SID can be effective in blocking network sign-in for local users and groups by account type regardless of what they're named.
S-1-5-114 	Local account and member of Administrators group 	You can use this SID when you're restricting network sign-in to local accounts instead of "administrator" or equivalent. This SID can be effective in blocking network sign-in for local users and groups by account type regardless of what they're named.
S-1-5-2 	Network 	A group that includes all users who are signed in via a network connection. Access tokens for interactive users don't contain the Network SID.
S-1-5-3 	Batch 	A group that includes all users who have signed in via batch queue facility, such as task scheduler jobs.
S-1-5-4 	Interactive 	A group that includes all users who sign in interactively. A user can start an interactive sign-in session by opening a Remote Desktop Services connection from a remote computer, or by using a remote shell such as Telnet. In each case, the user's access token contains the Interactive SID. If the user signs in by using a Remote Desktop Services connection, the user's access token also contains the Remote Interactive Logon SID.
S-1-5-5- X-Y 	Logon Session 	The X and Y values for these SIDs uniquely identify a particular sign-in session.
S-1-5-6 	Service 	A group that includes all security principals that have signed in as a service.
S-1-5-7 	Anonymous Logon 	A user who has connected to the computer without supplying a user name and password.
The Anonymous Logon identity is different from the identity that's used by Internet Information Services (IIS) for anonymous web access. IIS uses an actual account—by default, IUSR_ComputerName, for anonymous access to resources on a website. Strictly speaking, such access isn't anonymous, because the security principal is known even though unidentified people are using the account. IUSR_ComputerName (or whatever you name the account) has a password, and IIS signs in to the account when the service starts. As a result, the IIS "anonymous" user is a member of Authenticated Users but Anonymous Logon isn't.
S-1-5-8 	Proxy 	Doesn't currently apply: this SID isn't used.
S-1-5-9 	Enterprise Domain Controllers 	A group that includes all domain controllers in a forest of domains.
S-1-5-10 	Self 	A placeholder in an ACE for a user, group, or computer object in Active Directory. When you grant permissions to Self, you grant them to the security principal that's represented by the object. During an access check, the operating system replaces the SID for Self with the SID for the security principal that's represented by the object.
S-1-5-11 	Authenticated Users 	A group that includes all users and computers with identities that have been authenticated. Authenticated Users doesn't include Guest even if the Guest account has a password.
This group includes authenticated security principals from any trusted domain, not only the current domain.
S-1-5-12 	Restricted Code 	An identity that's used by a process that's running in a restricted security context. In Windows and Windows Server operating systems, a software restriction policy can assign one of three security levels to code:
Unrestricted
Restricted
Disallowed
When code runs at the restricted security level, the Restricted SID is added to the user's access token.
S-1-5-13 	Terminal Server User 	A group that includes all users who sign in to a server with Remote Desktop Services enabled.
S-1-5-14 	Remote Interactive Logon 	A group that includes all users who sign in to the computer by using a remote desktop connection. This group is a subset of the Interactive group. Access tokens that contain the Remote Interactive Logon SID also contain the Interactive SID.
S-1-5-15 	This Organization 	A group that includes all users from the same organization. Included only with Active Directory accounts and added only by a domain controller.
S-1-5-17 	IUSR 	An account that's used by the default Internet Information Services (IIS) user.
S-1-5-18 	System (or LocalSystem) 	An identity that's used locally by the operating system and by services that are configured to sign in as LocalSystem.
System is a hidden member of Administrators. That is, any process running as System has the SID for the built-in Administrators group in its access token.
When a process that's running locally as System accesses network resources, it does so by using the computer's domain identity. Its access token on the remote computer includes the SID for the local computer's domain account plus SIDs for security groups that the computer is a member of, such as Domain Computers and Authenticated Users.
S-1-5-19 	NT Authority (LocalService) 	An identity that's used by services that are local to the computer, have no need for extensive local access, and don't need authenticated network access. Services that run as LocalService access local resources as ordinary users, and they access network resources as anonymous users. As a result, a service that runs as LocalService has significantly less authority than a service that runs as LocalSystem locally and on the network.
S-1-5-20 	Network Service 	An identity that's used by services that have no need for extensive local access but do need authenticated network access. Services running as NetworkService access local resources as ordinary users and access network resources by using the computer's identity. As a result, a service that runs as NetworkService has the same network access as a service that runs as LocalSystem, but it has significantly reduced local access.
S-1-5-domain-500 	Administrator 	A user account for the system administrator. Every computer has a local Administrator account and every domain has a domain Administrator account.
The Administrator account is the first account created during operating system installation. The account can't be deleted, disabled, or locked out, but it can be renamed.
By default, the Administrator account is a member of the Administrators group, and it can't be removed from that group.
S-1-5-domain-501 	Guest 	A user account for people who don't have individual accounts. Every computer has a local Guest account, and every domain has a domain Guest account.
By default, Guest is a member of the Everyone and the Guests groups. The domain Guest account is also a member of the Domain Guests and Domain Users groups.
Unlike Anonymous Logon, Guest is a real account, and it can be used to sign in interactively. The Guest account doesn't require a password, but it can have one.
S-1-5-domain-502 	KRBTGT 	A user account that's used by the Key Distribution Center (KDC) service. The account exists only on domain controllers.
S-1-5-domain-512 	Domain Admins 	A global group with members that are authorized to administer the domain. By default, the Domain Admins group is a member of the Administrators group on all computers that have joined the domain, including domain controllers.
Domain Admins is the default owner of any object that's created in the domain's Active Directory by any member of the group. If members of the group create other objects, such as files, the default owner is the Administrators group.
S-1-5-domain-513 	Domain Users 	A global group that includes all users in a domain. When you create a new User object in Active Directory, the user is automatically added to this group.
S-1-5-domain-514 	Domain Guests 	A global group that, by default, has only one member: the domain's built-in Guest account.
S-1-5-domain-515 	Domain Computers 	A global group that includes all computers that have joined the domain, excluding domain controllers.
S-1-5-domain-516 	Domain Controllers 	A global group that includes all domain controllers in the domain. New domain controllers are added to this group automatically.
S-1-5-domain-517 	Cert Publishers 	A global group that includes all computers that host an enterprise certification authority.
Cert Publishers are authorized to publish certificates for User objects in Active Directory.
S-1-5-root domain-518 	Schema Admins 	A group that exists only in the forest root domain. It's a universal group if the domain is in native mode, and it's a global group if the domain is in mixed mode. The Schema Admins group is authorized to make schema changes in Active Directory. By default, the only member of the group is the Administrator account for the forest root domain.
S-1-5-root domain-519 	Enterprise Admins 	A group that exists only in the forest root domain. It's a universal group if the domain is in native mode, and it's a global group if the domain is in mixed mode.
The Enterprise Admins group is authorized to make changes to the forest infrastructure, such as adding child domains, configuring sites, authorizing DHCP servers, and installing enterprise certification authorities.
By default, the only member of Enterprise Admins is the Administrator account for the forest root domain. The group is a default member of every Domain Admins group in the forest.
S-1-5-domain-520 	Group Policy Creator Owners 	A global group that's authorized to create new Group Policy Objects in Active Directory. By default, the only member of the group is Administrator.
Objects that are created by members of Group Policy Creator Owners are owned by the individual user who creates them. In this way, the Group Policy Creator Owners group is unlike other administrative groups (such as Administrators and Domain Admins). Objects that are created by members of these groups are owned by the group rather than by the individual.
S-1-5-domain-521 	Read-only Domain Controllers 	A global group that includes all read-only domain controllers.
S-1-5-domain-522 	Clonable Controllers 	A global group that includes all domain controllers in the domain that can be cloned.
S-1-5-domain-525 	Protected Users 	A global group that is afforded additional protections against authentication security threats.
S-1-5-root domain-526 	Key Admins 	This group is intended for use in scenarios where trusted external authorities are responsible for modifying this attribute. Only trusted administrators should be made a member of this group.
S-1-5-domain-527 	Enterprise Key Admins 	This group is intended for use in scenarios where trusted external authorities are responsible for modifying this attribute. Only trusted enterprise administrators should be made a member of this group.
S-1-5-32-544 	Administrators 	A built-in group. After the initial installation of the operating system, the only member of the group is the Administrator account. When a computer joins a domain, the Domain Admins group is added to the Administrators group. When a server becomes a domain controller, the Enterprise Admins group also is added to the Administrators group.
S-1-5-32-545 	Users 	A built-in group. After the initial installation of the operating system, the only member is the Authenticated Users group.
S-1-5-32-546 	Guests 	A built-in group. By default, the only member is the Guest account. The Guests group allows occasional or one-time users to sign in with limited privileges to a computer's built-in Guest account.
S-1-5-32-547 	Power Users 	A built-in group. By default, the group has no members. Power users can create local users and groups; modify and delete accounts that they have created; and remove users from the Power Users, Users, and Guests groups. Power users also can install programs; create, manage, and delete local printers; and create and delete file shares.
S-1-5-32-548 	Account Operators 	A built-in group that exists only on domain controllers. By default, the group has no members. By default, Account Operators have permission to create, modify, and delete accounts for users, groups, and computers in all containers and organizational units of Active Directory except the Builtin container and the Domain Controllers OU. Account Operators don't have permission to modify the Administrators and Domain Admins groups, nor do they have permission to modify the accounts for members of those groups.
S-1-5-32-549 	Server Operators 	Description: A built-in group that exists only on domain controllers. By default, the group has no members. Server Operators can sign in to a server interactively; create and delete network shares; start and stop services; back up and restore files; format the hard disk of the computer; and shut down the computer.
S-1-5-32-550 	Print Operators 	A built-in group that exists only on domain controllers. By default, the only member is the Domain Users group. Print Operators can manage printers and document queues.
S-1-5-32-551 	Backup Operators 	A built-in group. By default, the group has no members. Backup Operators can back up and restore all files on a computer, regardless of the permissions that protect those files. Backup Operators also can sign in to the computer and shut it down.
S-1-5-32-552 	Replicators 	A built-in group that's used by the File Replication service on domain controllers. By default, the group has no members. Don't add users to this group.
S-1-5-domain-553 	RAS and IAS Servers 	A local domain group. By default, this group has no members. Computers that are running the Routing and Remote Access service are added to the group automatically.
Members of this group have access to certain properties of User objects, such as Read Account Restrictions, Read Logon Information, and Read Remote Access Information.
S-1-5-32-554 	Builtin\Pre-Windows 2000 Compatible Access 	An alias added by Windows 2000. A backward compatibility group that allows read access on all users and groups in the domain.
S-1-5-32-555 	Builtin\Remote Desktop Users 	An alias. Members of this group are granted the right to sign in remotely.
S-1-5-32-556 	Builtin\Network Configuration Operators 	An alias. Members of this group can have some administrative privileges to manage configuration of networking features.
S-1-5-32-557 	Builtin\Incoming Forest Trust Builders 	An alias. Members of this group can create incoming, one-way trusts to this forest.
S-1-5-32-558 	Builtin\Performance Monitor Users 	An alias. Members of this group have remote access to monitor this computer.
S-1-5-32-559 	Builtin\Performance Log Users 	An alias. Members of this group have remote access to schedule logging of performance counters on this computer.
S-1-5-32-560 	Builtin\Windows Authorization Access Group 	An alias. Members of this group have access to the computed tokenGroupsGlobalAndUniversal attribute on User objects.
S-1-5-32-561 	Builtin\Terminal Server License Servers 	An alias. A group for Terminal Server License Servers. When Windows Server 2003 Service Pack 1 is installed, a new local group is created.
S-1-5-32-562 	Builtin\Distributed COM Users 	An alias. A group for COM to provide computer-wide access controls that govern access to all call, activation, or launch requests on the computer.
S-1-5-32-568 	Builtin\IIS_IUSRS 	An alias. A built-in group account for IIS users.
S-1-5-32-569 	Builtin\Cryptographic Operators 	A built-in local group. Members are authorized to perform cryptographic operations.
S-1-5-domain-571 	Allowed RODC Password Replication Group 	Members in this group can have their passwords replicated to all read-only domain controllers in the domain.
S-1-5-domain-572 	Denied RODC Password Replication Group 	Members in this group can't have their passwords replicated to all read-only domain controllers in the domain.
S-1-5-32-573 	Builtin\Event Log Readers 	A built-in local group. Members of this group can read event logs from a local computer.
S-1-5-32-574 	Builtin\Certificate Service DCOM Access 	A built-in local group. Members of this group are allowed to connect to Certification Authorities in the enterprise.
S-1-5-32-575 	Builtin\RDS Remote Access Servers 	A built-in local group. Servers in this group enable users of RemoteApp programs and personal virtual desktops access to these resources. In internet-facing deployments, these servers are typically deployed in an edge network. This group needs to be populated on servers that are running RD Connection Broker. RD Gateway servers and RD Web Access servers used in the deployment need to be in this group.
S-1-5-32-576 	Builtin\RDS Endpoint Servers 	A built-in local group. Servers in this group run virtual machines and host sessions where users RemoteApp programs and personal virtual desktops run. This group needs to be populated on servers running RD Connection Broker. RD Session Host servers and RD Virtualization Host servers used in the deployment need to be in this group.
S-1-5-32-577 	Builtin\RDS Management Servers 	A built-in local group. Servers in this group can perform routine administrative actions on servers running Remote Desktop Services. This group needs to be populated on all servers in a Remote Desktop Services deployment. The servers running the RDS Central Management service must be included in this group.
S-1-5-32-578 	Builtin\Hyper-V Administrators 	A built-in local group. Members of this group have complete and unrestricted access to all features of Hyper-V.
S-1-5-32-579 	Builtin\Access Control Assistance Operators 	A built-in local group. Members of this group can remotely query authorization attributes and permissions for resources on this computer.
S-1-5-32-580 	Builtin\Remote Management Users 	A built-in local group. Members of this group can access Windows Management Instrumentation (WMI) resources over management protocols (such as WS-Management via the Windows Remote Management service). This applies only to WMI namespaces that grant access to the user.
S-1-5-64-10 	NTLM Authentication 	A SID that's used when the NTLM authentication package authenticates the client.
S-1-5-64-14 	SChannel Authentication 	A SID that's used when the SChannel authentication package authenticates the client.
S-1-5-64-21 	Digest Authentication 	A SID that's used when the Digest authentication package authenticates the client.
S-1-5-80 	NT Service 	A SID that's used as an NT Service account prefix.
S-1-5-80-0 	All Services 	A group that includes all service processes that are configured on the system. Membership is controlled by the operating system. SID S-1-5-80-0 equals NT SERVICES\ALL SERVICES. This SID was introduced in Windows Server 2008 R2.
S-1-5-83-0 	NT VIRTUAL MACHINE\Virtual Machines 	A built-in group. The group is created when the Hyper-V role is installed. Membership in the group is maintained by the Hyper-V Management Service (VMMS). This group requires the Create Symbolic Links right (SeCreateSymbolicLinkPrivilege) and the Log on as a Service right (SeServiceLogonRight).
Registry hive 	Supporting files
HKEY_LOCAL_MACHINE\SAM 	Sam, Sam.log, Sam.sav
HKEY_LOCAL_MACHINE\Security 	Security, Security.log, Security.sav
HKEY_LOCAL_MACHINE\Software 	Software, Software.log, Software.sav
HKEY_LOCAL_MACHINE\System 	System, System.alt, System.log, System.sav
HKEY_CURRENT_CONFIG 	System, System.alt, System.log, System.sav, Ntuser.dat, Ntuser.dat.log
HKEY_USERS\DEFAULT 	Default, Default.log, Default.sav
HKEY_CURRENT_USER 	Contains the root of the configuration information for the user who is currently logged on. The user's folders, screen colors, and Control Panel settings are stored here. This information is associated with the user's profile. This key is sometimes abbreviated as HKCU.
HKEY_USERS 	Contains all the actively loaded user profiles on the computer. HKEY_CURRENT_USER is a subkey of HKEY_USERS. HKEY_USERS is sometimes abbreviated as HKU.
HKEY_LOCAL_MACHINE 	Contains configuration information particular to the computer (for any user). This key is sometimes abbreviated as HKLM.
HKEY_CLASSES_ROOT 	Is a subkey of HKEY_LOCAL_MACHINE\Software. The information that is stored here makes sure that the correct program opens when you open a file by using Windows Explorer. This key is sometimes abbreviated as HKCR. Starting with Windows 2000, this information is stored under both the HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER keys. The HKEY_LOCAL_MACHINE\Software\Classes key contains default settings that can apply to all users on the local computer. The HKEY_CURRENT_USER\Software\Classes key contains settings that override the default settings and apply only to the interactive user. The HKEY_CLASSES_ROOT key provides a view of the registry that merges the information from these two sources. HKEY_CLASSES_ROOT also provides this merged view for programs that are designed for earlier versions of Windows. To change the settings for the interactive user, changes must be made under HKEY_CURRENT_USER\Software\Classes instead of under HKEY_CLASSES_ROOT. To change the default settings, changes must be made under HKEY_LOCAL_MACHINE\Software\Classes. If you write keys to a key under HKEY_CLASSES_ROOT, the system stores the information under HKEY_LOCAL_MACHINE\Software\Classes. If you write values to a key under HKEY_CLASSES_ROOT, and the key already exists under HKEY_CURRENT_USER\Software\Classes, the system will store the information there instead of under HKEY_LOCAL_MACHINE\Software\Classes.
HKEY_CURRENT_CONFIG 	Contains information about the hardware profile that is used by the local computer at system startup.
Name 	Data type 	Description
Binary Value 	REG_BINARY 	Raw binary data. Most hardware component information is stored as binary data and is displayed in Registry Editor in hexadecimal format.
DWORD Value 	REG_DWORD 	Data represented by a number that is 4 bytes long (a 32-bit integer). Many parameters for device drivers and services are this type and are displayed in Registry Editor in binary, hexadecimal, or decimal format. Related values are DWORD_LITTLE_ENDIAN (least significant byte is at the lowest address) and REG_DWORD_BIG_ENDIAN (least significant byte is at the highest address).
Expandable String Value 	REG_EXPAND_SZ 	A variable-length data string. This data type includes variables that are resolved when a program or service uses the data.
Multi-String Value 	REG_MULTI_SZ 	A multiple string. Values that contain lists or multiple values in a form that people can read are generally this type. Entries are separated by spaces, commas, or other marks.
String Value 	REG_SZ 	A fixed-length text string.
Binary Value 	REG_RESOURCE_LIST 	A series of nested arrays that is designed to store a resource list that is used by a hardware device driver or one of the physical devices it controls. This data is detected and written in the \ResourceMap tree by the system and is displayed in Registry Editor in hexadecimal format as a Binary Value.
Binary Value 	REG_RESOURCE_REQUIREMENTS_LIST 	A series of nested arrays that is designed to store a device driver's list of possible hardware resources the driver or one of the physical devices it controls can use. The system writes a subset of this list in the \ResourceMap tree. This data is detected by the system and is displayed in Registry Editor in hexadecimal format as a Binary Value.
Binary Value 	REG_FULL_RESOURCE_DESCRIPTOR 	A series of nested arrays that is designed to store a resource list that is used by a physical hardware device. This data is detected and written in the \HardwareDescription tree by the system and is displayed in Registry Editor in hexadecimal format as a Binary Value.
None 	REG_NONE 	Data without any particular type. This data is written to the registry by the system or applications and is displayed in Registry Editor in hexadecimal format as a Binary Value
Link 	REG_LINK 	A Unicode string naming a symbolic link.
QWORD Value 	REG_QWORD 	Data represented by a number that is a 64-bit integer. This data is displayed in Registry Editor as a Binary Value and was introduced in Windows 2000.
    Get-Item – get a registry key
    New-Item — create a new registry key
    Remove-Item – delete a registry key
    Get-ItemProperty – get the value of a registry parameter
    Set-ItemProperty – change the value of a registry parameter
    New-ItemProperty – create registry parameter
    Rename-ItemProperty – rename parameter
    Remove-ItemProperty — remove registry parameter

Get-Item –Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching
To get the value of a registry key parameter, use the Get-ItemProperty cmdlet.

$DriverUpdate = Get-ItemProperty –Path ‘HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching’
$DriverUpdate.SearchOrderConfig
Changing Registry Value with PowerShell

To change the value of the SearchOrderConfig reg parameter, use the Set-ItemProperty cmdlet:

Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching' -Name SearchOrderConfig -Value 0

Make sure that the parameter value has changed:

Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverSearching' -Name SearchOrderConfig

How to Create a New Register Key or Parameter with PowerShell?

To create a new registry key, use the New-Item command. Let’s create a new key with the name NewKey:

$HKCU_Desktop= "HKCU:\Control Panel\Desktop"
New-Item –Path $HKCU_Desktop –Name NewKey

Now let’s create a new parameter in a new registry key. Suppose we need to create a new string parameter of type REG_SZ named SuperParamString and value filetmp1.txt:

New-ItemProperty -Path $HKCU_Desktop\NewKey -Name "SuperParamString" -Value ”filetmp1.txt”  -PropertyType "String"

If you need to check if a specific registry key exists, use the Test-Path cmdlet:

Test-Path 'HKCU:\Control Panel\Desktop\NewKey'

The following PowerShell script will check if a specific registry value exists, and if not, create it.

regkey='HKCU:\Control Panel\Desktop\NewKey'
$regparam='testparameter'
if (Get-ItemProperty -Path $regkey -Name $regparam -ErrorAction Ignore)
{ write-host 'The registry entry already exist' }
else
{ New-ItemProperty -Path $regkey -Name $regparam -Value ”woshub_test”  -PropertyType "String"  }

Using the Copy-Item cmdlet, you can copy entries from one registry key to another:

$source='HKLM:\SOFTWARE\7-zip\'
$dest = 'HKLM:\SOFTWARE\backup'
Copy-Item -Path $source -Destination $dest -Recurse

If you want to copy everything, including subkeys, add the –Recurse switch.
Deleting a Registry Key or Parameter

The Remove-ItemProperty command is used to remove a parameter in the registry key. Let’s remove the parameter SuperParamString created earlier:

$HKCU_Desktop= "HKCU:\Control Panel\Desktop"
Remove-ItemProperty –Path $HKCU_Desktop\NewKey –Name "SuperParamString"

You can delete the entire registry key with all its contents:

Remove-Item –Path $HKCU_Desktop\NewKey –Recurse

To remove all items in the reg key (but not the key itself):

Remove-Item –Path $HKCU_Desktop\NewKey\* –Recurse
How to Rename a Registry Key or a Parameter?

You can rename the registry parameter with the command:

Rename-ItemProperty –path ‘HKCU:\Control Panel\Desktop\NewKey’ –name "SuperParamString" –newname “OldParamString”

In the same way, you can rename the registry key:

Rename-Item -path 'HKCU:\Control Panel\Desktop\NewKey' OldKey
Search Registry for Keyword Using PowerShell

PowerShell allows you to search the registry. The next following searches the HKCU:\Control Panel\Desktop for parameters, whose names contain the *dpi* key.

$Path = (Get-ItemProperty ‘HKCU:\Control Panel\Desktop’)
$Path.PSObject.Properties | ForEach-Object {
If($_.Name -like '*dpi*'){
Write-Host $_.Name ' = ' $_.Value
}
}

To find a registry key with a specific name:

Get-ChildItem -path HKLM:\ -recurse -ErrorAction SilentlyContinue | Where-Object {$_.Name -like "*woshub*"}

n the following example, we will modify the ACL in this registry key to grant write access to the built-in Users group.

Get current permissions:

$rights = Get-Acl -Path 'HKCU:\Control Panel\Desktop\NewKey'

Specify the user or group you want to grant access to:

$idRef = [System.Security.Principal.NTAccount]"BuiltIn\Users"

Select access level:

$regRights = [System.Security.AccessControl.RegistryRights]::WriteKey
Set permissions inheritance settings :

$inhFlags = [System.Security.AccessControl.InheritanceFlags]::None
$prFlags = [System.Security.AccessControl.PropagationFlags]::None

Access type (Allow/Deny):

$acType = [System.Security.AccessControl.AccessControlType]::Allow
Create an access rule:

$rule = New-Object System.Security.AccessControl.RegistryAccessRule ($idRef, $regRights, $inhFlags, $prFlags, $acType)

Add a new rule to the current ACL:

$rights.AddAccessRule($rule)

Apply new permissions to the registry key:

$rights | Set-Acl -Path 'HKCU:\Control Panel\Desktop\NewKey'

Getting a Registry Value from a Remote Computer via PowerShell

PowerShell allows you to access the registry of a remote computer. You can connect to a remote computer either using WinRM (Invoke-Command or Enter-PSSession). To get the value of a registry parameter from a remote computer:

Invoke-Command –ComputerName srv-fs1 –ScriptBlock {Get-ItemProperty -Path 'HKLM:\System\Setup' -Name WorkingDirectory}

Or using a remote registry connection (the RemoteRegistry service must be enabled)

$Server = "lon-fs1"
$Reg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $Server)
$RegKey= $Reg.OpenSubKey("System\Setup")
$RegValue = $RegKey.GetValue("WorkingDirectory")
